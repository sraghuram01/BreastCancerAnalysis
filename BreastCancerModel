import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn import tree
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler 
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("breast_cancer_survival.csv")

df.head()

print(df.isnull().sum())

df = df.dropna() # to remove the null rows from the dataset 

df.info()

print(df.Gender.value_counts())

stage = df["Tumour_Stage"].value_counts()
transactions = stage.index
quantity = stage.values

figure = px.pie(df, 
             values=quantity, 
             names=transactions,hole = 0.5, 
             title="Tumour Stages of Patients")
figure.show()

histology = df["Histology"].value_counts()
transactions = histology.index
quantity = histology.values
figure = px.pie(df, 
             values=quantity, 
             names=transactions,hole = 0.5, 
             title="Histology of Patients")
figure.show()

# ER status: Hormone-receptor positive (ER+) breast cancer is a type of breast cancer in which there are a significant number of receptors for either estrogen or progesterone.01 About 80-85% of all breast cancers are “ER”-positive, meaning they grow in response to the hormone estrogen or progesterone respectively.
print(df["ER status"].value_counts())
# PR status: status of the tumor
print(df["PR status"].value_counts())
# HER2 status: 
print(df["HER2 status"].value_counts())

surgery = df["Surgery_type"].value_counts()
transactions = surgery.index
quantity = surgery.values
figure = px.pie(df, 
             values=quantity, 
             names=transactions,hole = 0.5, 
             title="Type of Surgery of Patients")
figure.show()

encoder=LabelEncoder()
columns = ['Tumour_Stage','Histology','ER status','PR status','HER2 status','Gender','Surgery_type']
for col in columns:
    df[col] = encoder.fit_transform(df[col])

df2= df.drop(columns=['ER status','PR status'])
plt.figure(figsize=(16,9))
sns.heatmap(df2.corr(),annot=True)

X = df.drop(columns=['Patient_Status','Date_of_Surgery','Date_of_Last_Visit'])
y = df['Patient_Status']

xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.20, random_state=42) # split the dataset for testing and training data

error_rate = []

for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    score = cross_val_score(knn, xtrain, ytrain, cv=10)
    error_rate.append(1 - score.mean())
for i in range(len(error_rate)):
    print(f"K={i+1}: Error rate = {error_rate[i]}")

clf1 = LogisticRegression(max_iter = 500)
clf2 = SVC()
clf3 = tree.DecisionTreeClassifier(criterion='gini')
clf4 = KNeighborsClassifier(n_neighbors=19)
clf5 = GaussianNB()
clf6 = RandomForestClassifier(criterion='entropy', n_estimators=20)
clf7 = AdaBoostClassifier(n_estimators=600,learning_rate=0.001, random_state=1)

models = [clf1,clf2,clf3,clf4,clf5,clf6,clf7]
accuracy ={}
for i in models:
    i.fit(xtrain,ytrain)
    accuracy[i] = i.score(xtest,ytest)

accuracy

features = np.array([[36.0, 1, 0.080353, 0.42638, 0.54715, 0.273680, 3, 1, 1, 1, 2, 2,]])
print(clf1.predict(features))

